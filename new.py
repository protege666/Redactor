# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'newredactor2.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt, QPoint
from PyQt5.QtWidgets import QFileDialog, QMessageBox, QAction, QToolBar, QLabel
from PyQt5.QtGui import QPixmap, QPainter, QPen, QMouseEvent
from typing import Union
import cv2
from PyQt5.QtGui import QImage
import numpy as np
from PIL import Image
import sys
from PyQt5.QtWidgets import QMainWindow


class Ui_MainWindow(object):

    def select_file(self):
        global file_name
        global originalPhoto
        global count
        count = 0
        # Открываем диалог выбора файла
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        file_name, _ = QFileDialog.getOpenFileName(
            self.checkPhotoBtn, "Выбрать фотографию", "", "Images (*.png *.xpm *.jpg *.bmp *.gif)", options=options)
        originalPhoto = file_name
        if file_name:
            pixmap = QPixmap(file_name)
            self.photoLable.setPixmap(pixmap)
            self.Slider.setVisible(True)

    # Метод для удаления фотографии
    def del_photo(self):
        self.photoLable.setPixmap(QPixmap(""))
        self.Slider.hide()

    # Метод для применения фильтра к фотографии
    def apply_filter(self):
        filter_strength = self.Slider.value() * 2 + 1
        img = cv2.imread(file_name)

        # Обрабатываем изображение с помощью выбранного фильтра
        if self.comboBox.currentText() == 'Медианный':
            filtered_image = cv2.medianBlur(img, filter_strength)
            q_image = QImage(
                filtered_image, filtered_image.shape[1], filtered_image.shape[0], QImage.Format_RGB888)
            # return filtered_image
        elif self.comboBox.currentText() == 'Линейный':
            filtered_image = cv2.blur(
                img, (filter_strength, filter_strength))
            q_image = QImage(
                filtered_image, filtered_image.shape[1], filtered_image.shape[0], QImage.Format_RGB888)
        # return filtered_image
        elif self.comboBox.currentText() == 'Адаптивный':
            # self.photoLable.setPixmap(QPixmap(originalPhoto))

            #img = Image.open(file_name)
            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            #gray = img.convert('L')
            filtered_image = cv2.adaptiveThreshold(
                gray, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, filter_strength, 2)
            q_image = QImage(
                filtered_image, filtered_image.shape[1], filtered_image.shape[0], QImage.Format_Grayscale8)
            # return q_image

        # return filtered_image
        return q_image
    # Метод для обновления фотографии

    def reloadforFilter(self):
        self.Slider.setValue(1)
        pixmap = QPixmap(originalPhoto)
        self.photoLable.setPixmap(pixmap)

    def updatePhoto(self):
        pict = self.apply_filter()
        # qimage = QImage(
        #     pict.data, pict.shape[1], pict.shape[0], QImage.Format_RGB888)
        qpixmap = QPixmap.fromImage(pict)
        self.photoLable.setPixmap(qpixmap)
        print(self.Slider.value() * 2 + 1)

    def reload(self):
        self.Slider.setValue(1)
        pixmap = QPixmap(originalPhoto)
        self.photoLable.setPixmap(pixmap)

    def save_file(self):
        pixmap = self.photoLable.pixmap()

        # открываем диалог сохранения файла
        filename, _ = QFileDialog.getSaveFileName(
            self.photoLable, 'Save Image', '', 'Image Files (*.png *.jpg *.bmp)')

        # сохраняем QPixmap в выбранный файл
        if filename:
            pixmap.save(filename)


# ==============================================================================================================================================


    def set_pencil(self, checked):
        #self.action_2.setChecked(True)
        self.photoLable.mousePressEvent = None
        self.photoLable.mouseMoveEvent = None
        self.photoLable.mouseReleaseEvent = None
        #count += 1
        checked = True
        # self.action_2.setChecked(True)
        # если выбран инструмент карандаш, включаем возможность рисования
        # if count % 2 == 1:
        #     self.action_2.setChecked(True)
        # else:
        #     self.action_2.setChecked(False)
        if checked:
            self.photoLable.mousePressEvent = self.mouse_press
            self.photoLable.mouseMoveEvent = self.mouse_move
            self.photoLable.mouseReleaseEvent = self.mouse_release
        # если выбран другой инструмент, отключаем возможность рисования
        else:
            self.photoLable.mousePressEvent = None
            self.photoLable.mouseMoveEvent = None
            self.photoLable.mouseReleaseEvent = None

    def mouse_press(self, event: QMouseEvent):
        # сохраняем текущую точку
        print(event.pos())
        self.last_point = QPoint(event.pos().x(), event.pos().y() - 150)
        self.drawing = True

    def mouse_move(self, event):
        print(self.action_2.isChecked())
        print(self.drawing)
        # если выбран инструмент карандаш и мы рисуем, рисуем линию между последней точкой и текущей
        if self.action_2.isChecked() and self.drawing:
            painter = QPainter(self.photoLable.pixmap())

            painter.setPen(QPen(Qt.black, 2, Qt.SolidLine))
            painter.drawLine(self.last_point, QPoint(event.pos().x(), event.pos().y() - 150))
            painter.end()
            self.last_point = QPoint(event.pos().x(), event.pos().y() - 150)
            self.photoLable.update()

    def mouse_release(self, event):
        self.drawing = False


# ==============================================================================================================================================

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1119, 805)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.photoLable = QtWidgets.QLabel(self.centralwidget)
        self.photoLable.setGeometry(QtCore.QRect(10, 50, 711, 691))
        self.photoLable.setText("")
        self.photoLable.setObjectName("photoLable")
        self.checkPhotoBtn = QtWidgets.QPushButton(self.centralwidget)
        self.checkPhotoBtn.setGeometry(QtCore.QRect(830, 180, 171, 61))
        self.checkPhotoBtn.setObjectName("checkPhotoBtn")
        # Сигнал для выбора файла
        self.checkPhotoBtn.clicked.connect(self.select_file)
        self.Slider = QtWidgets.QSlider(self.centralwidget)
        self.Slider.setGeometry(QtCore.QRect(770, 490, 321, 22))
        self.Slider.setMinimum(1)
        self.Slider.setMaximum(23)
        self.Slider.setSingleStep(1)
        self.Slider.setOrientation(QtCore.Qt.Horizontal)
        self.Slider.setObjectName("Slider")
        # Сигнал для обновления фотографии
        self.Slider.valueChanged.connect(self.updatePhoto)
        self.Slider.hide()
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(770, 450, 141, 16))
        self.label.setObjectName("label")
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(830, 120, 171, 31))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.activated.connect(self.reloadforFilter)
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.restartButton = QtWidgets.QPushButton(self.centralwidget)
        self.restartButton.setGeometry(QtCore.QRect(830, 260, 171, 61))
        self.restartButton.setObjectName("restartButton")
        self.restartButton.clicked.connect(self.reload)
        self.DelButton = QtWidgets.QPushButton(self.centralwidget)
        self.DelButton.setGeometry(QtCore.QRect(830, 340, 171, 61))
        self.DelButton.setObjectName("DelButton")
        # Сигнал для удаления фотографии
        self.DelButton.clicked.connect(self.del_photo)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1119, 26))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        self.menu_2 = QtWidgets.QMenu(self.menubar)
        self.menu_2.setObjectName("menu_2")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.action = QtWidgets.QAction(MainWindow)

        self.action.setObjectName("action")
        self.action.triggered.connect(self.save_file)
        self.action_2 = QtWidgets.QAction(MainWindow)
        self.action_2.setObjectName("action_2")
        self.action_2.setCheckable(True)
        self.action_2.setChecked(False)
        self.action_2.triggered.connect(self.set_pencil)
        self.action_3 = QtWidgets.QAction(MainWindow)
        self.action_3.setObjectName("action_3")
        self.menu.addAction(self.action)
        self.menu_2.addAction(self.action_2)
        self.menu_2.addAction(self.action_3)
        self.menubar.addAction(self.menu.menuAction())
        self.menubar.addAction(self.menu_2.menuAction())
        # =====================================================================================================
        # создаем действия для тулбара

        # устанавливаем начальные параметры для рисования карандашом
        # self.drawing = False
        # self.last_point = QPoint()

        # =====================================================================================================
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.checkPhotoBtn.setText(_translate("MainWindow", "Выбрать фото"))
        self.label.setText(_translate("MainWindow", "Интенсивность"))
        self.comboBox.setItemText(0, _translate("MainWindow", "Медианный"))
        self.comboBox.setItemText(1, _translate("MainWindow", "Линейный"))
        self.comboBox.setItemText(2, _translate("MainWindow", "Адаптивный"))
        self.restartButton.setText(_translate("MainWindow", "Сброс фильтра"))
        self.DelButton.setText(_translate("MainWindow", "Удалить фото"))
        self.menu.setTitle(_translate("MainWindow", "Файл"))
        self.menu_2.setTitle(_translate("MainWindow", "Инструменты"))
        self.action.setText(_translate("MainWindow", "Сохранить"))
        self.action_2.setText(_translate("MainWindow", "Карандаш"))
        self.action_3.setText(_translate("MainWindow", "Ластик"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
