# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'redactor.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtGui import QPixmap
from typing import Union
import cv2
from PyQt5.QtGui import QImage
import numpy as np
import time


class Ui_MainWindow(object):

    def select_file(self):
        global file_name
        # Открываем диалог выбора файла
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        file_name, _ = QFileDialog.getOpenFileName(
            self.checkPhotoBtn, "Выбрать фотографию", "", "Images (*.png *.xpm *.jpg *.bmp *.gif)", options=options)

        if file_name:
            # Загружаем выбранный файл в QPixmap
            # countSlider = self.Slider.value()
            # pict = self.apply_median_filter(file_name, self.Slider.value())
            # qimage = QImage(
            #     pict.data, pict.shape[1], pict.shape[0], QImage.Format_RGB888)
            # qpixmap = QPixmap.fromImage(qimage)
            # self.photoLable.setPixmap(qpixmap)

            pixmap = QPixmap(file_name)
            # Отображаем QPixmap в Label
            self.photoLable.setPixmap(pixmap)
            # img = self.photoLable.pixmap().toImage()
            # img = np.array(img.convertToFormat(QImage.Format_RGB888))

            # kernel_size = self.Slider.value()
            # filtered_img = cv2.medianBlur(img, kernel_size)

            # qimage = QImage(
            #     filtered_img.data, filtered_img.shape[1], filtered_img.shape[0], QImage.Format_RGB888)
            # qpixmap = QPixmap.fromImage(qimage)

            # self.photoLable.setPixmap(qpixmap)
            # # self.updatePhoto()
            # # self.photoLable.setPixmap(pixmap)

    def clear_photo(self):
        self.photoLable.setPixmap(QPixmap(""))

    def apply_median_filter(self, image_path, kernel_size):
        # загружаем изображение
        img = cv2.imread(image_path)

        # применяем медианный фильтр с заданным размером ядра
        filtered_img = cv2.medianBlur(img, kernel_size * 2 + 1)
        return filtered_img

    # ждем нажатия любой клавиши и закрываем окна

    def sliderMoved(self):
        value = self.Slider.value()
        self.label.setText(str(value))

    def median_filter(self, image_path, intensity, kernel_size):
        # Загружаем изображение с помощью OpenCV
        image = cv2.imread(str(image_path))

        # Применяем медианный фильтр с заданным размером ядра
        filtered_image = cv2.medianBlur(image, kernel_size)

        # Применяем эффект насыщенности к изображению
        hsv = cv2.cvtColor(filtered_image, cv2.COLOR_BGR2HSV)
        h, s, v = cv2.split(hsv)
        v = cv2.add(v, intensity)
        filtered_image = cv2.cvtColor(cv2.merge((h, s, v)), cv2.COLOR_HSV2BGR)

        # Возвращаем обработанное изображение
        return filtered_image

    def updatePhoto(self):
        pict = self.apply_median_filter(file_name, self.Slider.value())
        qimage = QImage(
            pict.data, pict.shape[1], pict.shape[0], QImage.Format_RGB888)
        qpixmap = QPixmap.fromImage(qimage)
        self.photoLable.setPixmap(qpixmap)

    # def changeFilter(self):
    #     if self.comboBox.currentText() == "Медианный":
    #         self.Slider.setMinimum(1)
    #         self.Slider.setMaximum(10)
    #         self.Slider.valueChanged.connect(self.updatePhoto)

    def apply_filter(self):
        if self.comboBox.currentText() == "Медианный":
            self.Slider.valueChanged.connect(self.updatePhoto)
        elif self.comboBox.currentText() == "Линейный":
            print("Линейный")
        # elif self.filter_combo.currentText() == "Адаптивный":
        #     gray_image = cv2.cvtColor(self.image, cv2.COLOR_BGR2GRAY)
        #     filtered_image = cv2.adaptiveThreshold(gray_image, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, kernel_size, 2)
        # self.display_image(filtered_image)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.photoLable = QtWidgets.QLabel(self.centralwidget)
        self.photoLable.setGeometry(QtCore.QRect(20, 10, 351, 531))
        self.photoLable.setText("")
        self.photoLable.setObjectName("photoLable")
        self.checkPhotoBtn = QtWidgets.QPushButton(self.centralwidget)
        self.checkPhotoBtn.setGeometry(QtCore.QRect(410, 180, 171, 61))
        self.checkPhotoBtn.setObjectName("checkPhotoBtn")
        self.checkPhotoBtn.clicked.connect(self.select_file)
        self.Slider = QtWidgets.QSlider(self.centralwidget)
        self.Slider.setGeometry(QtCore.QRect(400, 500, 321, 22))
        self.Slider.setOrientation(QtCore.Qt.Horizontal)
        self.Slider.setObjectName("Slider")
        self.Slider.setMinimum(1)
        self.Slider.setMaximum(10)
        self.Slider.valueChanged.connect(self.sliderMoved)
        self.Slider.valueChanged.connect(self.apply_filter)

        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(400, 460, 141, 16))
        self.label.setObjectName("label")

        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(620, 180, 121, 31))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("Медианный")
        self.comboBox.addItem("Линейный")
        self.comboBox.addItem("Адаптивный")
        self.comboBox.activated.connect(self.apply_filter)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(410, 270, 171, 61))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.clear_photo)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.checkPhotoBtn.setText(_translate("MainWindow", "Выбрать фото"))
        self.label.setText(_translate("MainWindow", "1"))
        self.comboBox.setItemText(0, _translate("MainWindow", "Медианный"))
        self.comboBox.setItemText(1, _translate("MainWindow", "Линейный"))
        self.comboBox.setItemText(2, _translate("MainWindow", "Адаптивный"))
        self.pushButton.setText(_translate("MainWindow", "Сброс"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
